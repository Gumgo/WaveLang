### TEMPLATE template
bool voice_main(out real mono) {
	mono = 0;
	return true;
}

### TEMPLATE template_f
bool voice_main(out real mono) {
	f();
	mono = 0;
	return false;
}

### FILE self_ref.wl This is used to test self-referential imports
import self_ref;

### FILE math.wl This conflicts with a native module library
import core;

public real abs(in real x) {
	core.assert(false);
	return 0;
}

### FILE private_imports.wl

void private_a() {}
private void private_b() {}
const real private_c = 0;
private const real private_d = 0;

### FILE root_import.wl

public const real root_value = 0;

public const real root_module() {
	return root_value;
}

### FILE folder/child_import.wl

public const real child_value = 1;

public const real child_module() {
	return child_value;
}

### FILE folder/relative_import.wl
import .rel;
import ..up_tree;
import ..folder2.up_down_tree;

void f() {
	rel.rel();
	up_tree.up_tree();
	folder2.up_down_tree.up_down_tree();
}

### FILE folder/rel.wl
public void rel() {}

### FILE up_tree.wl
public void up_tree() {}

### FILE folder2/up_down_tree.wl
public void up_down_tree() {}

### TEST import_does_not_exist k_failed_to_resolve_import
import does_not_exist;

## template

### TEST self_referential_import k_self_referential_import
import self_ref;

## template

### TEST import_native_library success
@import math;

## template_f

void f() { math.abs(0); }

### TEST prefer_file_over_native_import k_native_module_error
import math;

## template_f

void f() { math.abs(0); }

### TEST private_declarations_not_imported_1 k_identifier_resolution_failed
import private_imports;

## template

void f() { private_imports.private_a(); }

### TEST private_declarations_not_imported_2 k_identifier_resolution_failed
import private_imports;

## template

void f() { private_imports.private_b(); }

### TEST private_declarations_not_imported_3 k_identifier_resolution_failed
import private_imports;

## template

real f() { return private_imports.private_c; }

### TEST private_declarations_not_imported_4 k_identifier_resolution_failed
import private_imports;

## template

real f() { return private_imports.private_d; }

### TEST import_as success
import core;
import root_import;
import folder.child_import;
import root_import as ri;
import folder.child_import as ci;
import root_import as a.b.c;
import folder.child_import as a.b.c;
import root_import as .;
import folder.relative_import;

## template_f

void f() {
	core.assert(root_import.root_module() == 0);
	core.assert(root_import.root_value == 0);
	core.assert(folder.child_import.child_module() == 1);
	core.assert(folder.child_import.child_value == 1);
	core.assert(ri.root_module() == 0);
	core.assert(ri.root_value == 0);
	core.assert(ci.child_module() == 1);
	core.assert(ci.child_value == 1);
	core.assert(a.b.c.root_module() == 0);
	core.assert(a.b.c.root_value == 0);
	core.assert(a.b.c.child_module() == 1);
	core.assert(a.b.c.child_value == 1);
	core.assert(root_module() == 0);
	core.assert(root_value == 0);
}
