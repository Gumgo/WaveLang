### TEMPLATE template
bool voice_main(out real mono) {
	mono = 0;
	return false;
}

### TEMPLATE template_f
bool voice_main(out real mono) {
	f();
	mono = 0;
	return false;
}

### TEST in_arguments success
import core;

## template_f

void g(in const real x, in const bool y) {
	core.assert(x == 1);
	core.assert(y);
}

void f() {
	g(1, true);
}

### TEST out_arguments success
import core;

## template_f

void g(out const real x, out const bool y) {
	x = 1;
	y = true;
}

void f() {
	const real x;
	const bool y;
	g(out x, out y);
	core.assert(x == 1);
	core.assert(y);
}

### TEST default_arguments success
import core;

## template_f

const real f(in const real x = 10) {
	return x;
}

void g() {
	core.assert(f() == 10);
	core.assert(f(5) == 5);
}

### TEST illegal_argument_ordering k_illegal_argument_ordering
## template

void f(in real x = 5, in real y) {}

### TEST duplicate_argument k_duplicate_argument
## template

void f(in real x, in real x) {}

### TEST illegal_out_argument k_illegal_out_argument
## template

void f(out real x = 10) {}

### TEST unassigned_out_argument k_unassigned_out_argument
## template

void f(out real x) {}

### TEST maybe_unassigned_out_argument k_unassigned_out_argument
## template

void f(in const real x, out real y) {
	if (x == 0) {
		y = 1;
	}
}

### TEST assigned_out_argument success
## template

void f(in const real x, out real y) {
	if (x == 0) {
		y = 1;
	} else {
		y = 2;
	}
}

### TEST missing_return_statement k_missing_return_statement
## template

real f() {}

### TEST maybe_missing_return_statement k_missing_return_statement
## template

real f(in const real x) {
	if (x == 0) {
		return 1;
	}
}

### TEST present_return_statement success
## template

real f(in const real x) {
	if (x == 0) {
		return 1;
	} else {
		return 2;
	}
}

### TEST not_callable_type k_not_callable_type
## template

const real x = 2;

void f() {
	x();
}

### TEST overload success
import core;

## template_f

const real g(in const real x) {
	return 0;
}

const real g(in real x) {
	return 1;
}

const real g(in const bool x) {
	return 2;
}

const real g(in const real x, in const real y) {
	return 3;
}

void f() {
	core.assert(g(0) == 0);
	core.assert(g(real(0)) == 1);
	core.assert(g(false) == 2);
	core.assert(g(0, 0) == 3);
}

### TEST overload_conflict k_declaration_conflict
## template

const real f() {
	return 0;
}

const bool f() {
	return false;
}

### TEST constant_and_module_conflict k_declaration_conflict
## template

const real f = 5;

void f() {}

### TEST named_arguments success
import core;

## template_f

const real g(in const real a, in const real b, in const real c = 10) {
	return c;
}

void f() {
	core.assert(g(0, 1, 2) == 2);
	core.assert(g(0, 1, c = 2) == 2);
	core.assert(g(0, c = 2, b = 1) == 2);
	core.assert(g(a = 0, b = 1, c = 2) == 2);
	core.assert(g(b = 1, c = 2, a = 0) == 2);
}

### TEST invalid_named_argument k_invalid_named_argument
## template

void g(in const real a, in const real b) {}

void f() {
	g(0, c = 2);
}

### TEST too_many_arguments k_too_many_arguments_provided
## template

void g(in const real a) {}

void f() {
	g(0, 1);
}

### TEST duplicate_argument_provided k_duplicate_argument_provided
## template

void g(in const real a) {}

void f() {
	g(a = 0, a = 1);
}

### TEST argument_direction_mismatch_1 k_argument_direction_mismatch
## template

void g(in const real a) {}

void f() {
	const real x;
	g(out x);
}

### TEST argument_direction_mismatch_2 k_argument_direction_mismatch
## template

void g(out const real a) {
	a = 0;
}

void f() {
	g(1);
}

### TEST missing_argument k_missing_argument
## template

void g(in const real a, in const real b) {}

void f() {
	g(0);
}

### TEST ambiguous_overload_resolution k_ambiguous_module_overload_resolution
## template

void g(in const real a = 0) {}
void g(in const bool a = false) {}

void f() {
	g();
}

### TEST no_matching_modules k_empty_module_overload_resolution
## template

void g(in const real a) {}
void g(in const bool a) {}

void f() {
	g("hello");
}

### TEST argument_type_mismatch k_type_mismatch

void g(in const real a) {}

void f() {
	g(false);
}

### TEST invalid_out_argument k_invalid_out_argument
## template

void g(out const real x) {
	x = 0;
}

void f() {
	g(out 1);
}

### TEST unmodifiable_out_argument k_invalid_out_argument
## template

void g(out const real x) {
	x = 0;
}

const real y = 0;

void f() {
	g(out y);
}

### TEST out_argument_type_mismatch k_type_mismatch
## template

void g(out const real x) {
	x = 0;
}

void f() {
	const bool x;
	g(out x);
}

### TEST invalid_out_argument_subscript k_illegal_variable_subscript_assignment
## template

void g(out const real x) {
	x = 0;
}

void f() {
	const real[] x = {[1, 2, 3]};
	real i = 0;
	g(out x[i]);
}

### TEST incorrect_return_type k_return_type_mismatch
## template

real f() {
	return true;
}

### TEST module_recursion_limit k_module_call_depth_limit_exceeded
## template_f

void g() {
	f();
}

void f() {
	g();
}

### TEST dependent_constant success
## template

void f() {
	const real y;
	const real x = g(1, out y);

	real w;
	real z = g(1, out w);

	real c = 0;
	real b;
	real a = g(c, out b);
}

const? real g(in const? real a, out const? real b) {
	b = a;
	return a;
}

### TEST dependent_constant_failure k_type_mismatch

void f() {
	real a = 0;
	const real y;
	const real x = g(a, out y);
}

const? real g(in const? real a, out const? real b) {
	b = a;
	return a;
}
