### TEMPLATE template
bool voice_main(out real mono) {
	mono = 0;
	return false;
}

### TEMPLATE template_f
bool voice_main(out real mono) {
	f();
	mono = 0;
	return false;
}

### TEST real_upsample_factor_mismatch k_type_mismatch
## template

void f() {
	real x = 0;
	real@2x y = x;
}

### TEST bool_upsample_factor_mismatch k_type_mismatch
import resampler;

## template

void f() {
	bool x = false;
	bool@2x y = x;
}

### TEST upsampled_module success
import resampler;

## template

void f() {
	real@3x x = 0;
	real@6x y = g(x);
	real@6x z = g@3x(x);
	real@3x w = resampler.downsample2x(z, 0);
}

real@2x g(in real x) {
	return resampler.upsample2x(x, 0);
}

### TEST upsample_latency success
import core;
import resampler;

## template_f

void f() {
	real x = 0;
	real@3x y = resampler.upsample3x(x, 1);
	core.assert(core.get_latency(y) == 384); // 128 * 3

	real z = resampler.downsample3x(y, 1);
	core.assert(core.get_latency(z) == 171); // 128 + ceil(128 /3)

	bool a = false;
	bool@3x b = resampler.upsample3x(a);
	core.assert(core.get_latency(b) == 0);

	bool c = resampler.downsample3x(b);
	core.assert(core.get_latency(c) == 0);

	real@4x d = core.add_latency@4x(0, 3);
	core.assert(core.get_latency(d) == 3);
	real e = resampler.downsample4x(d, 1);
	core.assert(core.get_latency(e) == 33); // The 1 sample of latency at 4x gets rounded up
}
