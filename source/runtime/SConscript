# Runtime - a stand-alone synth engine

import os
import os.path

import build_config
import utils

Import("*")

env = env.Clone()

if str(platform) == "win32":
	portaudio_lib_dir = {
		build_config.Configuration.DEBUG: build_options.portaudio_lib_dir_debug,
		build_config.Configuration.DEVELOPMENT: build_options.portaudio_lib_dir_debug,
		build_config.Configuration.RELEASE: build_options.portaudio_lib_dir_release
	}[configuration]

	portaudio_lib_name = "portaudio_x64"
	portaudio_shared_lib_name = "portaudio_x64.dll"

	rtmidi_lib_dir = {
		build_config.Configuration.DEBUG: build_options.rtmidi_lib_dir_debug,
		build_config.Configuration.DEVELOPMENT: build_options.rtmidi_lib_dir_debug,
		build_config.Configuration.RELEASE: build_options.rtmidi_lib_dir_release
	}[configuration]

	rtmidi_lib_name = "rtmidi"
	rtmidi_shared_lib_name = "rtmidi.dll"

	rapidxml_include_dir = build_options.rapidxml_include_dir
else:
	raise SCons.Errors.BuildError("Unsupported platform '{}'".format(platform))

if str(platform) == "win32":
	env.Append(LIBS = ["shlwapi.lib"])

env.Append(CPPPATH = ["#source", rapidxml_include_dir])

sources = utils.enumerate_files(env, ".", utils.SOURCE_EXTENSIONS)
static_libraries = ["common", "driver", "engine", "execution_graph", "native_module", "task_function"]
env.Append(
	LIBS = static_libraries + [portaudio_lib_name, rtmidi_lib_name],
	LIBPATH = ["../bin", portaudio_lib_dir, rtmidi_lib_dir])

objects = []
for source in sources:
	obj = env.StaticObject(source)
	objects += obj

runtime_program = env.Program("runtime", objects)

# The runtime requires the console for message display purposes
env.Depends(runtime_program, ["console"])

runtime_installed = env.Install("../bin", runtime_program)
env.Alias("runtime", runtime_installed)

# Install to app directory
portaudio_shared_lib_app = env.Install("#app", os.path.join(portaudio_lib_dir, portaudio_shared_lib_name))
rtmidi_shared_lib_app = env.Install("#app", os.path.join(rtmidi_lib_dir, rtmidi_shared_lib_name))
runtime_app = env.Install("#app", runtime_installed)
env.Depends(runtime_app, ["console_app"])
env.Depends(runtime_app, portaudio_shared_lib_app)
env.Depends(runtime_app, rtmidi_shared_lib_app)
env.Alias("runtime_app", runtime_app)
