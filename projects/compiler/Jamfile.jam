# Compiler - compiles source code into binary files which can be loaded by the runtime

import path ;
import sequence ;
import vs-project-generator ;
	
local project-name = compiler ;

local defines = ;

local features = ;

local source-dir = $(TOP)/source ;

local all-files = [ path.glob-tree
	### Source paths:
	$(source-dir)/common
	$(source-dir)/compiler
	$(source-dir)/execution_graph
	$(source-dir)/natvis
	:
	### Search patterns:
	$(GLOB_PATTERNS)
	:
	### Exclude patterns:
	]
	### Registration file: no dependency created here, but it gets pulled into the VS project:
	[ path.make $(source-dir)/native_module_registration_inputs.h ]
	;

local include-directories =
	$(source-dir) ;

# Configuration-dependent libraries: is there a better way to do this?
alias configuration-dependent-libraries :
	$(WINDOWS_SDK_DIR)/Lib/winv6.3/um/x86/ShLwApi.Lib :
	<toolset>msvc <variant>debug <address-model>32 ;

alias configuration-dependent-libraries :
	$(WINDOWS_SDK_DIR)/Lib/winv6.3/um/x64/ShLwApi.Lib :
	<toolset>msvc <variant>debug <address-model>64 ;

alias configuration-dependent-libraries :
	$(WINDOWS_SDK_DIR)/Lib/winv6.3/um/x86/ShLwApi.Lib :
	<toolset>msvc <variant>release <address-model>32 ;

alias configuration-dependent-libraries :
	$(WINDOWS_SDK_DIR)/Lib/winv6.3/um/x64/ShLwApi.Lib :
	<toolset>msvc <variant>release <address-model>64 ;

local libraries = configuration-dependent-libraries ;

if $(GENERATE_VS_PROJECTS) = 1
{
	# Don't declare any targets when generating VS project files
	local local-files = [ get-local-source-files $(all-files) ] ;
	vs-project-generator.setup-vs-project-config $(TOP) : $(project-name) : $(defines) : $(features) : $(local-files) : $(include-directories) ;
}
else
{
	# Add include directories to features
	features += <include>$(include-directories) <define>$(defines) ;

	# This target is dependent on the generated registration file
	features += <dependency>$(TOP)//registration-file ;

	# Determine the set of source files
	local source-files = [ sequence.filter is-c-or-cpp-file : $(all-files) ] ;

	# Declare obj files for each one
	local obj-targets ;
	for local source-file in $(source-files)
	{
		local obj-target = [ get-obj-file-from-source-file $(project-name) : $(source-file) ] ;
		obj-targets += $(obj-target) ;
		obj $(obj-target) : $(source-file) : $(features) ;
	}

	# Declare the executable
	exe $(project-name) : $(obj-targets) $(libraries) : $(features) ;

	# Install to the app directory
	local install-dir = [ get-app-dir ] ;
	install $(project-name)-install : $(project-name) :
		<variant>debug,<address-model>32:<location>$(install-dir)/debug_32
		<variant>debug,<address-model>64:<location>$(install-dir)/debug_64
		<variant>release,<address-model>32:<location>$(install-dir)/release_32
		<variant>release,<address-model>64:<location>$(install-dir)/release_64 ;
}
