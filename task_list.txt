- Codebase improvements
	- Convert more indices to use c_handle

- Add "build_config" file that gets generated by the build script the first time and allows specification of build options

- Divorce driver chunk size from processing chunk size
	- Use chunk_size synth global
	- Processing chunk size is always fixed, and defined as an execution graph global in the synth source file
		- Defaults to 0
		- If 0, will use the driver chunk size (which can be variable), but is incompatible with certain effects which require fixed size chunk processing
	- Cases to handle:
		- Processing chunk size 0
			- Processing chunk size set to always match driver chunk size (possibly variable)
		- Processing chunk size nonzero, driver chunk size variable
			- Accumulator with delay
		- Processing chunk size nonzero, driver chunk size fixed
			- Driver chunk size is multiple of processing chunk size
				- Process exactly (driver chunk size) / (processing chunk size) processing chunks per driver update
			- Driver chunk size is not multiple of processing chunk size
				- Accumulator with delay
	- Explanation of "accumulator with delay"
		- Instead of immediately processing a chunk, it is added to an accumulator and delayed by the processing chunk size
		- Once the accumulator fills up to the chunk size it is processed and discarded
		- This avoids situations where we need to fill the driver buffer but don't have enough input samples to process a full (fixed-size) chunk

- Delay types
	- Delay
		- Takes input, returns delayed output
	- Feedback with decay
		- Signal feeds back on itself but multiplied by a decay factor
		- Special-case of general purpose feedback, but common
	- Feedback (general purpose)
		- Split into two functions:
			- void write_feedback(string identifier, real value)
			- real read_feedback(string identifier)
		- Similar to delay but allows the reads to occur BEFORE the writes
		- Unique identifier is used to associate a read and write
			- Emit error on initialization if a single read is associated with multiple writes, or if a single write is associated with multiple reads
		- During initialization, reads/writes
		- Constraint: decay time must be at least as big as chunk processing size
			- Emit error on initialize if this is not true
	- Variable delay
		- Max delay is specified as a constant, actual delay can be variable
		- Delay is sub-sample accurate

- Latency compensation
	- Each variable should have a latency value associated with it
	- If an operation is performed on variables with mismatched latencies, delay operations are inserted to make them match
		- Applies to all outputs as well
		- Constants also get delayed if they are e.g. being added to a variable with latency (I think)
	- The instrument reports a total latency equal to the latency of the outputs

- Switch to Flex/Lemon for lexer/parser

- Plugin system ($PLUGIN)
	- Allow users to register their own native modules and tasks
	- Restrict library ID to anything but the 0-255 range

- Audio input stream ($INPUT)
	- Support input parameters to the main module taken from an audio input source

- MIDI input support ($MIDI)
	- Add support for more channels

- Improve compiler diagnostics ($DIAGNOSTIC)
	- Create a diagnostic class to report messages, warnings, and errors
	- Separate out error reporting from error return values

- Upsampled buffer operations ($UPSAMPLE)
	- Upsampled types:
		- real@2x, real@8x, etc.
		- type@Nx means "upsampled by a factor of N"
		- Constants are compatible with any sampling rate factor
	- Upsampled operations:
		- module_name@2x(...)
		- module_name@Nx(...) executes the module at N times the stream sample rate
			- Expects all inputs and outputs to be upsampled by N as well
	- Upsampling and downsampling functions:
		- module real __native_resample(in real signal, const bool filter_nyquist)
		- Special-case logic: "signal" can have any sampling rate factor and is not affected by @Nx
		- In practice:
			- module real@Nx __native_resample@Nx(in real@Mx signal)
			- N and M are independent
		- When downsampling, if filter_nyquist is true, a filter is applied at the nyquist frequency

- Add debug library ($DEBUG)
	- Add modules to print values on a trigger
	- Add scraper attribute to disable optimization/removal of modules with no contributing outputs (otherwise print would be removed)

- Expand the timing library ($TIMING)
	- Add edge triggers

- Add JSON library ($JSON)
	- Functions to read values of various types, e.g. json.read_real_array("file.json", "path/to/value")

- Random functions ($RANDOM)
	- Function random(static_seed, dynamic_seed) generates a stream of random values from 0-1
	- Function voice_random(static_seed, dynamic_seed) generates a single random value constant for the current voice
	- static_seed must be a compile-time constant
	- dynamic_seed can be dynamic and is only evaluated on the first sample of a new voice
	- Idea for random number generation:
		- Pre-generate a large buffer of a prime length filled with uniform random values in the range [0, 1)
			- Use standard library RNG for this since it's just once at initialization
		- Pick N offsets and strides (N=2 or 3 is probably good, details below for generation below)
			- Each offset is in the range [0, buffer_length)
			- Each stride is in the range [1, buffer_length)
		- To sample noise:
			- Each sample, grab the N values at indices offset_i and add them together, then mod by 1 to keep the value in the range [0, 1)
				- Since each individual value is uniform, the final result is as well
			- Increment each offset by the corresponding stride, wrapping when the end is reached
		- Choosing the initial offsets/strides:
			- Construct an array of values from 0 to buffer_length-1 and scramble the order
				- Use standard library RNG for this since it's just once at initialization
			- Scramble the bits in the seed 2N different ways (what's the best way to do this? are some randomly chosen xor seeds good enough?)
			- For each offset: mod the scrambled bits by buffer_length and pick from the array
			- For each stride: mod the scrambled bits by buffer_length-1, add 1 if the chosen index is >= the index of 0 in the array (we should never have a stride of 0)
	- Add functions to shape random values for various distributions, e.g. normal distribution
		- Have an optional cap value (e.g. abs(normal(x, 10)) will be capped at 10)

- Fix include order ($INCLUDE)
	- Write a script to do this
	- Each category should be sorted alphabetically (folders names don't come first)
	- Order:
		- Local (extra linebreak between categories)
		- Third party
		- Standard library

- Code style updates
	- SFINAE helper macros
